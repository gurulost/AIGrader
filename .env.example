# AI Feedback Platform - Environment Variables

# Application Environment
# Set to 'production' for production environments
# When set to 'production', Redis/BullMQ will be enabled by default
NODE_ENV=development

# Database Connection
# PostgreSQL connection URL (takes precedence over individual parameters)
DATABASE_URL=postgres://username:password@localhost:5432/database_name
# Individual PostgreSQL connection parameters (used if DATABASE_URL is not set)
PGHOST=localhost
PGPORT=5432
PGUSER=postgres
PGPASSWORD=postgres
PGDATABASE=ai_feedback

# Redis Configuration
# Set to 'true' to enable Redis and BullMQ even in non-production environments
# This is useful for testing the queue in development
ENABLE_REDIS=false

# Redis connection URL (takes precedence over individual parameters)
# IMPORTANT FOR DEPLOYMENT: This must be a valid Redis URL with proper credentials
# Example format: redis://username:password@host:port
# For some Redis providers like Upstash, use the full connection string they provide
REDIS_URL=redis://username:password@localhost:6379

# Individual Redis connection parameters (used if REDIS_URL is not set)
# These will be ignored if REDIS_URL is provided
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_USERNAME=
REDIS_DB=0

# AI API Keys
# At least one of these should be set for AI feedback generation
# If both are provided, Gemini will be used by default
GEMINI_API_KEY=your_gemini_api_key
OPENAI_API_KEY=your_openai_api_key

# Session Configuration
# REQUIRED: A secure random string used to sign session cookies
# This MUST be set to a strong, unique, random value at least 32 characters long
# For production: Run this command to generate a secure random value:
#   node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SESSION_SECRET=

# Security
# REQUIRED: Secret key for CSRF protection
# This MUST be set to a strong, unique, random value at least 32 characters long
# For production: Run this command to generate a secure random value:
#   node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
CSRF_SECRET=

# Auth0 Configuration for SSO (for Google Auth integration)
# REQUIRED for SSO with Google
AUTH0_DOMAIN=your-tenant.auth0.com
AUTH0_CLIENT_ID=your_client_id
AUTH0_CLIENT_SECRET=your_client_secret

# MIT Horizon OIDC Configuration for Direct SSO
# REQUIRED for direct integration with MIT Horizon Auth0 tenant
MIT_HORIZON_OIDC_ISSUER_URL=https://mit-horizon.auth0.com/
MIT_HORIZON_OIDC_CLIENT_ID=your_mit_horizon_client_id
MIT_HORIZON_OIDC_CLIENT_SECRET=your_mit_horizon_client_secret
MIT_HORIZON_OIDC_CALLBACK_URL=https://aigrader.replit.app/api/auth/horizon/callback

# Base application URL - REQUIRED for production deployments 
# Used to construct callback URLs and links consistently
# e.g., 'https://aigrader.replit.app' (no trailing slash)
BASE_URL=https://your-app-domain.com

# Auth0 callback URL - REQUIRED and must be whitelisted in Auth0 dashboard
# For production, set this to your full callback URL, matching what's in your Auth0 settings
# If not set, it will be constructed from BASE_URL + '/api/auth-sso/callback'
AUTH0_CALLBACK_URL=http://localhost:5000/api/auth-sso/callback

# IMPORTANT: When using Auth0, you must whitelist TWO URLs in your Auth0 application settings:
# 1. The callback URL above (AUTH0_CALLBACK_URL or BASE_URL + '/api/auth-sso/callback')
# 2. The logout return URL must be your BASE_URL with NO PATH (e.g., 'https://aigrader.replit.app')
#    - Auth0 has strict requirements for logout URLs - only use the root domain
#    - Using a URL with a path (like '/auth') will cause Auth0 to show an error page
# This is required for the complete SSO authentication flow to work properly
#
# The same requirements apply to the MIT Horizon OIDC integration:
# 1. The MIT_HORIZON_OIDC_CALLBACK_URL must be whitelisted in the MIT Horizon Auth0 application
# 2. The logout return URL must be your BASE_URL with NO PATH

# Google Cloud Storage Configuration
# Required for uploading files to GCS
GOOGLE_APPLICATION_CREDENTIALS=./path/to/your/gcp-service-account-key.json
GCS_BUCKET_NAME=aigrader-uploads
# Optional - typically inferred from credentials
# GCP_PROJECT_ID=your-gcp-project-id

# Other Configuration
# Maximum file upload size in bytes (default: 10MB)
MAX_UPLOAD_SIZE=10485760