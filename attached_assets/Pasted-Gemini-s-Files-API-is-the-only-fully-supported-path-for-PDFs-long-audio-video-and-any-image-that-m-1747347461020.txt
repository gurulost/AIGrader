Gemini’s Files API is the only fully-supported path for PDFs, long audio/video, and any image that might blow past the inline 5 MB soft limit. Passing raw gs:// or web URLs sometimes works but is explicitly best-effort and will fail on larger files, private buckets, or future API changes. The right architecture is:

Upload the binary once with genAI.files.upload() (or media.upload in REST).
Get back a stable URI that looks like files/abc123.
Reference that URI in the fileData.fileUri field of your prompt. 
Google AI for Developers
Keep the file ID around for up to 48 h (Files API retention window) or re-upload as needed. 
Google AI for Developers
What still needs wiring (ranked)

1 ️⃣ Build (or reinstate) createFileData
Goal – return { fileUri: 'files/abc123', mimeType } for any Buffer, local path, or GCS URL.

async function createFileData(
  source: Buffer | string,
  mimeType: string
): Promise<{ fileUri: string; mimeType: string }> {
  // 1. Resolve to a Buffer on disk if you only have a URL
  const data = Buffer.isBuffer(source)
      ? source
      : await fetchToBuffer(source);          // your helper

  // 2. Upload once; cache by sha256 so re-submissions don’t double bill
  const hash = sha256(data);
  const cached = await redis.get(`gemini:file:${hash}`);
  if (cached) return { fileUri: cached, mimeType };

  const file = await this.genAI.files.upload({
    buffer: data,
    mimeType
  });                                         // SDK 0.14+ call
  await redis.setex(`gemini:file:${hash}`, 47 * 60 * 60, file.uri); // 47 h TTL
  return { fileUri: file.uri, mimeType };
}
Why first? Without it, any PDF >5 MB or a private gs:// link will crash grading.

2 ️⃣ Integrate upload into generateMultimodalCompletion
Replace the current branch for document | audio | video:

- const fileUri = part.content as string;
- apiParts.push({
-   fileData: { mimeType: part.mimeType || 'application/octet-stream', fileUri }
- });
+ const { fileUri, mimeType } = await createFileData(
+   part.content as Buffer | string,
+   part.mimeType || 'application/octet-stream'
+ );
+ apiParts.push({ fileData: { mimeType, fileUri } });
For large images (>5 MB) call createFileData too and switch from inlineData to fileData.

3 ️⃣ Decide where uploads happen
Two proven patterns:

Adapter-level (simplest): createFileData sits inside GeminiAdapter; every consumer gets upload for free.
Service-level (scales better): AIService or the Bull queue worker uploads once, stores fileUri in DB, and passes only the URI to the adapter.
Pick one and document it; just never mix both or you’ll double-upload.