We are preparing AIGrader to integrate with MIT Horizon for SSO, which will be federated through our existing Auth0 tenant. While we await specific configuration details from MIT Horizon, you can proceed with the foundational work in AIGrader to support this.

Your tasks are to:

Prepare for Auth0 Integration (server/auth.ts, .env.example):

Ensure the passport-auth0 library is installed (npm install passport-auth0).
Add placeholders for the necessary Auth0 environment variables in .env.example: AUTH0_DOMAIN, AUTH0_CLIENT_ID, AUTH0_CLIENT_SECRET, AUTH0_CALLBACK_URL.
Add startup validation logic in server/auth.ts to check for the presence of these environment variables (similar to how SESSION_SECRET is validated).
Update Database Schema (shared/schema.ts):

Modify the users table:
Make the password column nullable.
Add a new column: auth0Sub: text("auth0_sub").unique().nullable() (for storing the Auth0 user ID; ensure it's indexed for lookups).
Add/ensure an emailVerified: boolean("email_verified").default(false).notNull() column.
Remember to guide me to run npm run db:push after these changes are merged.
Update Storage Layer (server/storage.ts):

Define and implement the following new methods in the DatabaseStorage class and IStorage interface:
getUserByAuth0Sub(auth0Sub: string): Promise<User | undefined>
updateUserAuth0Sub(userId: number, auth0Sub: string): Promise<User | undefined>
updateUserEmailVerifiedStatus(userId: number, isVerified: boolean): Promise<User | undefined>
updateUserRole(userId: number, newRole: string): Promise<User | undefined> (This will be used later for admin promotions).
Scaffold Auth0Strategy (server/auth.ts):

Add the basic structure for the passport-auth0 strategy. You can use placeholder values for domain, clientID, clientSecret, and callbackURL that will be filled in later from environment variables.
In the strategy's verify callback async (accessToken, refreshToken, extraParams, profile, done) => { ... }:
Implement the logic to extract auth0UserId, email, name, and emailVerified from the Auth0 profile object (log the profile object structure if unsure of exact paths).
Implement the user lookup logic:
Try storage.getUserByAuth0Sub(auth0UserId).
If not found, try storage.getUserByEmail(email). If found, prepare to call storage.updateUserAuth0Sub() (actual update can be done once the strategy is live).
Scaffold the new user provisioning logic: if no user is found, prepare to call storage.createUser() with password: null, the extracted Auth0 details, and a default role of 'student'.
Prepare to call storage.updateUserEmailVerifiedStatus() if necessary.
Ensure the done(null, userProfileForSession) call is structured to pass a minimal, AIGrader-specific user object.
Authentication Routes (Scaffolding in server/auth.ts or server/routes.ts):

Define New Routes:
GET /api/auth-sso/login (or a similar distinct path for the SSO flow). Scaffold it to call passport.authenticate('auth0', { scope: 'openid email profile' }).
GET /api/auth-sso/callback. Scaffold it for passport.authenticate('auth0', { failureRedirect: '/login?error=sso_failed', successRedirect: '/dashboard' }).
Preserve Local Login: Ensure the existing POST /api/auth/login and its LocalStrategy logic remain untouched and functional.
Prepare Logout Route: Plan the modification for /api/auth/logout. After req.logout(), it will need to redirect to the Auth0 logout endpoint. The exact Auth0 logout URL construction can be finalized once we have the AUTH0_DOMAIN and AUTH0_CLIENT_ID.
Client-Side Login UI (client/src/pages/Login.tsx or similar):

Keep the existing username/password form functional.
Add a placeholder button (e.g., "Login with University SSO" or "Login with MIT Horizon"). This button will eventually link to /api/auth-sso/login. For now, it can be disabled or link to a placeholder.
Admin Role Management API (Backend Only for Now):

Implement the backend API endpoint PUT /api/admin/users/:userId/role in server/routes/admin.ts as previously detailed (protected by admin role, validates input, calls storage.updateUserRole). The client-side UI for this can be built later.
This preparatory work will ensure that once we receive the necessary details from MIT Horizon and configure our Auth0 tenant, integrating it into AIGrader will be smoother as much of the AIGrader-side code structure will already be in place.