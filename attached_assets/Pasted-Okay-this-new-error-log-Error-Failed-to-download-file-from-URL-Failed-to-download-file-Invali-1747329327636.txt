Okay, this new error log – "Error: Failed to download file from URL: Failed to download file: Invalid URL" when encountering a GCS path – provides a very clear pointer to the issue.

The problem lies in how your application is trying to fetch files specified by Google Cloud Storage (GCS) URLs (e.g., gs://bucket-name/file-name). Standard HTTP download clients cannot directly process these gs:// paths.

Here’s targeted advice for your AI Coder:

Overall Vision & Goal for the AI Coder
Objective: To enable the AIGrader platform to reliably fetch file content from various sources, including standard HTTP/HTTPS URLs and Google Cloud Storage (GCS) gs:// paths. This is crucial for ensuring that all specified multimedia files can be processed and sent to the Gemini AI for feedback.

Addressing the GCS URL Download Issue: "Invalid URL"
The error "Invalid URL" arises because the current file download mechanism in server/utils/multimodal-processor.ts is designed for standard web URLs (HTTP/HTTPS) and doesn't recognize or properly handle the gs:// protocol used by Google Cloud Storage.

Here’s how to guide your AI Coder to fix this:

1. Modify server/utils/multimodal-processor.ts

The core of the fix will be in the processFileForMultimodal and downloadFileFromUrl (or equivalent) functions within this file.

Detect GCS URLs:

Action: Before attempting to download, the system needs to identify if the provided filePathOrUrl is a GCS path.
Guidance: Implement a check (e.g., if (filePathOrUrl.startsWith('gs://'))) at the beginning of processFileForMultimodal or within the URL handling block.
Implement GCS-Specific Download Logic:

Action: If a GCS URL is detected, use the Google Cloud Storage client library (@google-cloud/storage, which is already initialized in server/utils/gcs-client.ts) to fetch the file.
Guidance:
Parse GCS Path: Extract the bucketName and fileName from the gs:// string. For example, from gs://my-bucket/path/to/my-image.jpg, you'd get my-bucket and path/to/my-image.jpg.
Use GCS Client:
TypeScript
// Example snippet for multimodal-processor.ts
// Ensure 'storage' (the GCS client instance from gcs-client.ts) is accessible here
// You might need to import it or pass it as a dependency.

import { storage } from '../utils/gcs-client'; // Adjust path as needed
import { logger } from '../lib/logger'; // Assuming logger is available

async function downloadFromGCS(gcsPath: string): Promise<Buffer> {
  try {
    const [bucketName, ...objectPathParts] = gcsPath.replace('gs://', '').split('/');
    const objectName = objectPathParts.join('/');

    if (!bucketName || !objectName) {
      logger.error(`Invalid GCS path: ${gcsPath}`);
      throw new Error(`Invalid GCS path format: ${gcsPath}`);
    }

    logger.info(`Attempting to download from GCS: gs://<span class="math-inline">\{bucketName\}/</span>{objectName}`);
    const [fileContents] = await storage.bucket(bucketName).file(objectName).download();
    logger.info(`Successfully downloaded from GCS: ${gcsPath}`);
    return fileContents;
  } catch (error: any) {
    logger.error(`Failed to download from GCS path ${gcsPath}: ${error.message}`, { error });
    throw new Error(`Failed to download file from GCS (${gcsPath}): ${error.message}`);
  }
}
Integrate into processFileForMultimodal:
TypeScript
// Inside processFileForMultimodal or a refactored download function
if (filePathOrUrl.startsWith('gs://')) {
  fileBuffer = await downloadFromGCS(filePathOrUrl);
  // You might want to extract the original filename from the GCS path here for metadata
  originalFileName = filePathOrUrl.substring(filePathOrUrl.lastIndexOf('/') + 1);
} else if (isValidHttpUrl(filePathOrUrl)) { // Your existing HTTP/S download logic
  // The current downloadFileFromUrl uses new URL(), which will throw on 'gs://'
  // Ensure this block is only hit for actual http/https URLs.
  const parsedUrlCheck = new URL(filePathOrUrl); // Keep this for http/https validation
  if (!['http:', 'https:'].includes(parsedUrlCheck.protocol)) {
      throw new ErrorWithLog(`Unsupported URL protocol: ${parsedUrlCheck.protocol}. Only HTTP, HTTPS, and gs:// are supported.`, /*...*/);
  }
  fileBuffer = await downloadFileFromUrl(filePathOrUrl); // Assumes downloadFileFromUrl handles only http/s
  originalFileName = filePathOrUrl.substring(filePathOrUrl.lastIndexOf('/') + 1);
} else {
  // Existing local file reading logic
}
Server Permissions: Ensure the service account or credentials used by your server have the necessary IAM permissions (e.g., storage.objects.get) to read from the GCS buckets you are trying to access.
Refine downloadFileFromUrl for HTTP/HTTPS only:

Action: The existing downloadFileFromUrl function in multimodal-processor.ts uses new URL(url). This will correctly throw an error for gs:// schemes if it's reached. Make sure the logic flow directs gs:// URIs to the new GCS download function before downloadFileFromUrl is called with a gs:// URI.
Guidance: The protocol check if (!['http:', 'https:'].includes(parsedUrl.protocol)) within downloadFileFromUrl is good for standard URLs, but the new URL(url) constructor itself will fail for gs:// URIs if not handled earlier. The primary fix is to route GCS URIs to a dedicated handler.
2. Ensure GCS Client Availability

Action: Make sure the initialized GCS storage client from server/utils/gcs-client.ts is properly imported and accessible within server/utils/multimodal-processor.ts.
Guidance: This might involve exporting the storage instance from gcs-client.ts if it isn't already, and then importing it in multimodal-processor.ts.
3. Enhanced Error Handling and Logging

Action: Improve error messages to be more specific for GCS download failures.
Guidance:
Instead of a generic "Invalid URL" or "Failed to download file," catch errors from the GCS download process and log/throw more informative messages like "Failed to download from GCS: Bucket 'bucket-name' not found" or "Failed to download from GCS: File 'file-name' not found or access denied."
Log the GCS path being accessed when an error occurs.
By implementing these changes, your AI Coder will enable the system to correctly interpret gs:// paths, use the Google Cloud Storage client library to fetch the file data, and then proceed with the existing pipeline to process the content and send it to the Gemini AI. This should resolve the "Invalid URL" error for GCS image paths.