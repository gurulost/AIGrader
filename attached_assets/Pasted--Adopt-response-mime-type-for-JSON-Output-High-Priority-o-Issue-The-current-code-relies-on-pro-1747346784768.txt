•	Adopt response_mime_type for JSON Output (High Priority):
o	Issue: The current code relies on prompting the AI to return JSON and then parsing the text response (with markdown stripping and cleaning). While this works, it's less robust than explicitly telling the API to output JSON. The GenerationConfig interface still has responseFormat?: { type: string }; which is generally for older models or different AI services.
o	Guidance:
1.	Ensure your @google/generative-ai SDK is up-to-date.
2.	Modify the GenerationConfig interface in gemini-adapter.ts to use response_mime_type:
TypeScript
interface GenerationConfig {
  temperature?: number;
  maxOutputTokens?: number;
  topK?: number;
  topP?: number;
  // responseFormat?: { type: string }; // Remove or comment out
  response_mime_type?: string;      // Add this
  [key: string]: unknown;
}
3.	In the constructor and in generateMultimodalCompletion (where generationConfig is defined), add response_mime_type: "application/json" to the generationConfig object passed to the model.
TypeScript
// Example in constructor:
generationConfig: {
  temperature: 0.4,
  maxOutputTokens: 8192,
  topP: 0.95,
  topK: 64,
  response_mime_type: "application/json" // Add this
}

// Example in generateMultimodalCompletion:
const generationConfig: GenerationConfig = {
  temperature: 0.7, 
  maxOutputTokens: 2048,
  topP: 0.95,
  topK: 64,
  response_mime_type: "application/json" // Add this
};
4.	With response_mime_type: "application/json", the model should directly return a JSON string, potentially simplifying your parsing logic (though keeping markdown stripping and cleanJsonStringas fallbacks or pre-processing is still wise). The response.text() should be a clean JSON string. Remove the console.log about not using responseFormat.
o	Why: This is the official and more reliable way to request JSON output from newer Gemini models, reducing the chances of the AI adding extra text or markdown around the JSON.
Enhance JSON Parsing Robustness:
•	Issue: While cleanJsonString is good, parsing can still fail.
•	Guidance: When JSON.parse fails (even after markdown stripping and cleanJsonString), ensure you log the exact string that was attempted to be parsed. This is invaluable for diagnosing persistent or subtle JSON syntax errors from the AI.
TypeScript
// In the catch block for JSON.parse:
} catch (parseError) {
  aiLogger.error("Failed to parse JSON from Gemini response", { 
    error: parseError, 
    rawResponseAttempted: jsonString // Log the string that failed
  });
  // ... fallback logic ...
}

Low Priority Improvements:
•	Configuration for Model Name:
o	Issue: The modelName is hardcoded ("gemini-2.5-flash-preview-04-17").
o	Guidance: Make the modelName configurable, perhaps via an environment variable (e.g., process.env.GEMINI_MODEL_NAME) with the current value as a default. This allows easier switching or updating of models without code changes, aligning with server/docs/AI_MODELS.md.

