### Quick verdict

* Staying on **SDK 0.14.x** (Gemini Developer API) is fine—no Vertex changes needed.
* Moving everything to **camelCase `fileData` / `fileUri` / `mimeType` and pushing it as a proper `Part`** is the **correct** approach for 0.14; the client transforms camelCase → snake\_case on the wire.
* The two places you fixed the cast (`apiParts.push(filePart as unknown as Part)`) now need to be **identical**—pick one style (prefer the typed helper, no `unknown`).

Below is a checklist to be sure the new camelCase path works and the old snake\_case remnants don’t sneak back.

---

## 1 File-handler output

```ts
export interface GeminiFileData {
  fileUri:  string;   // camelCase
  mimeType: string;
}
```

`createFileData` should return that shape **camelCase**, because you now pass it straight into a `Part`.

```ts
const fileData: GeminiFileData = {
  fileUri: file.uri,
  mimeType
};
```

*(If you keep the Redis hash key in snake\_case that’s fine; just convert before returning.)*

---

## 2 Adapter push code (one pattern only)

```ts
const part: Part = { fileData };  // fileData is GeminiFileData
apiParts.push(part);
```

No `as unknown` needed if `fileData` has the right type.

Delete `toSDKFormat`—it’s obsolete.

---

## 3 Upload call uses **buffer:** not **data:**

```ts
const file = await genAI.files.upload({
  buffer: buf,
  mimeType
});
```

The `data:` field belongs to 0.15-beta; on 0.14 it triggers the “size” crash.

---

## 4 Class import

```ts
import { GoogleGenerativeAI } from '@google/genai';
```

(The adapter and file-handler must both use the same class.)

---

## 5 Content-length helper call order

```ts
const useFiles = shouldUseFilesAPI(mimeType, contentLength);
```

Make sure no call still has the parameters flipped.

---

## 6 Type-safe Part cast

Pick one style:

```ts
// simplest: rely on Part inference
apiParts.push({ fileData });                 // OK

// or explicit:
const part: Part = { fileData };
apiParts.push(part);                         // OK
```

Avoid `as unknown as Part`; it hides future type errors.

---

## 7 Clean-up

* Remove every `[FETCHBUFFER]` / debug log.
* Delete snake\_case constants (`file_data`, `file_uri`, `mime_type`) if no longer used.

---

## 8 Final smoke-test (same four files)

1. **small PNG** (<5 MB) → `inlineData`
2. **large PNG** (>5 MB) → `fileData`
3. **DOCX (gs\://)** → `fileData`, no crash
4. **PDF (http)** → `fileData`

If all four grade and return valid JSON, the adapter is now consistent, type-safe, and SDK-0.14-compliant.

**Looks right—just confirm the upload parameter (`buffer`) and the class name, clean the casts, and you’re done.**
