"We need to replace our current text input methods for assignment creation and editing with a proper open-source rich text editor. This will provide instructors with better formatting capabilities for creating assignment descriptions, rubric criteria details, and the new 'instructor-only context/evaluation guide'. We will use QuillJS for this purpose.

Goal:
Integrate QuillJS into the relevant instructor-facing forms in the AIGrader client application. The editor should allow basic formatting (e.g., bold, italics, underline, lists, links) and the output should be stored appropriately in the backend and rendered safely.

Key Areas to Modify & Implement:

Install QuillJS:

Add QuillJS to the project dependencies: npm install quill
Include Quill's necessary CSS for styling (e.g., quill.snow.css).
Create a Reusable React Rich Text Editor Component (e.g., QuillEditor.tsx):

This component will wrap the QuillJS editor.
Props: It should accept value (the initial content, likely HTML string or Quill Delta) and an onChange callback (to propagate changes up to the form state).
Initialization: Initialize Quill on a div element within this component.
Toolbar Configuration: Configure a standard toolbar with common formatting options:
Bold, Italic, Underline
Header levels (H1, H2, H3)
Bulleted and Numbered Lists
Links
(Optional, consider for later) Basic code blocks, blockquotes.
Content Handling:
When the Quill editor's content changes (text-change event), the component's onChange callback should be triggered.
Decide on the data format to pass via onChange:
Option A (Recommended for storage): Quill Delta object (JSON). This is Quill's native, structured format.
Option B: HTML string. If using HTML, ensure it's properly sanitized before storage and rendering.
The component should be able to take either Delta or an HTML string as its initial value prop and render it correctly.
Integrate QuillEditor.tsx into Instructor Forms:

Identify all client-side forms where instructors input significant descriptive text. This primarily includes:
Assignment Creation/Editing Form:
For the description field.
For the instructorContext (or evaluationGuide) field.
Rubric Criteria Creation/Editing (within the Assignment Form):
For the description field of each rubric criterion.
Replace existing <textarea> or simple input fields for these with the new <QuillEditor /> component.
Ensure these forms (likely using React Hook Form, based on client/README.md) correctly manage the state of the rich text editor's content (Delta or HTML string).
Backend Data Storage (server/routes.ts, shared/schema.ts):

Assignment Description: The assignments.description field (currently text) is suitable for storing HTML output from Quill or a JSON string representation of its Delta.
Rubric Criteria Description: The description within the rubric JSON object (on the assignments table) also needs to accommodate HTML or Delta JSON. The current Zod schema for rubric criteria description (z.string()) will work for storing HTML or stringified JSON.
Instructor-Only Context: The new instructorContext field (proposed as json) is ideal for storing Quill's Delta directly, or it can store HTML if that's the chosen output.
Instruction: "No immediate database schema changes might be needed if existing text or json fields are used to store HTML or stringified Delta. However, ensure the backend API endpoints for creating/updating assignments and their rubrics can correctly receive and store the rich text content (either as an HTML string or a JSON string of the Delta)."
Rendering Rich Text Content (Client-Side):

When displaying assignment descriptions, rubric details, or any other content generated by the rich text editor:
If you stored HTML: The content must be rendered using a method that sanitizes it to prevent XSS attacks (e.g., using a library like DOMPurify before setting dangerouslySetInnerHTML, or if your UI framework has built-in sanitized HTML rendering).
If you stored Quill Delta (JSON): You can use Quill itself (in a read-only mode) or another library to render the Delta object to HTML on the client side. This is often safer as Quill understands its own format. Alternatively, convert Delta to sanitized HTML on the server before sending to the client.
Instruction: "Implement a secure way to render the rich text content on the client-side.
If storing HTML from Quill: Sanitize it using a library like DOMPurify before rendering.
If storing Quill Delta: Use Quill to render the Delta to HTML in read-only mode, or implement a server-side Delta-to-HTML conversion with sanitization."
Styling:

Ensure Quill's default theme (e.g., snow) is imported and that the editor's appearance integrates reasonably well with the existing AIGrader styling (TailwindCSS, Shadcn UI). Custom Quill styling can be applied if needed.
Consider Existing Data:

If there's existing assignment/rubric data with plain text descriptions, decide how this will be handled. It will likely render as plain text within the new editor initially, and instructors can then format it if they edit the assignment.
Focus for initial implementation:

Get the Quill editor working for the assignment description field first as a primary use case.
Ensure the content saves to the backend and renders correctly and safely.
Then, replicate this for rubric criteria descriptions and the new instructor-only context field.
This change will significantly improve the experience for instructors creating content. Prioritize security (XSS prevention when rendering HTML) and a good user experience for the editor itself.