Now that you've completed the latest coding tasks and made all the changes discussed today, please proceed with the following quality assurance steps:
1. Write New Tests:
    * For any new features you've implemented, write comprehensive unit tests to cover individual functions, methods, and components.
    * Write integration tests to verify the interaction between newly added or significantly modified components/modules, especially for API endpoints or service layer changes.
    * Focus on testing both successful paths (happy paths) and common error conditions or edge cases for new functionality.
2. Run All Test Suites:
    * Execute the entire test suite, which includes:
        * Unit tests (./test/run-tests.sh unit or equivalent)
        * Integration tests (./test/run-tests.sh integration or equivalent)
        * Component tests (if applicable to UI changes, e.g., ./test/run-tests.sh components)
        * End-to-end tests (if available and relevant to the scope of your changes, e.g., ./test/run-tests.sh e2e)
    * The primary goal is to ensure that your recent changes haven't introduced regressions in existing functionality and that the new features work as specified.
3. Address Test Failures:
    * If any tests fail, debug and fix the underlying issues in the codebase or the tests themselves until all tests pass.
    * If you have refactored any part of the code to improve its structure, performance, or clarity, ensure that all existing tests still pass.
    * If existing tests are failing because of intentional design changes or refactoring you've made (and not because of a bug), update those tests to reflect the new correct behavior. Ensure the underlying business logic and functionality are still correctly covered by the updated tests.
4. Verify Test Coverage:
    * If possible (e.g., by running ./test/run-tests.sh coverage), review the test coverage report.
    * Ensure that new code sections have adequate test coverage. Aim to maintain or improve overall test coverage.
5. Final Code Review (Self-Review):
    * Before considering the work complete, perform a self-review of your changes. Check for:
        * Adherence to coding standards and project conventions.
        * Clarity and readability of new code.
        * Sufficient comments for complex logic.
        * Removal of any temporary debugging code or console.log statements.
6. Provide a Summary:
    * Once all tests pass and you've completed your review, provide a summary that includes:
        * Confirmation that all new features have been tested.
        * Confirmation that all relevant test suites (unit, integration, component) pass.
        * The overall test pass/fail status (e.g., "All tests passed: X unit tests, Y integration tests").
        * Any significant tests that were added or updated due to refactoring.
        * (Optional, if applicable) Any observations or notes on test coverage for the new changes.
Only after all these steps are successfully completed and all tests are passing should the work be considered ready for commit/merge.
