We are adding a new authentication method to AIGrader: direct OIDC integration with MIT Horizon's Auth0 tenant. This will coexist with our current authentication systems (our own Auth0 tenant for Google login, and local username/password for test accounts).
Key Objectives:
•	Allow users to log in via a "Login with MIT Horizon" button.
•	This new flow should provision/link users in our AIGrader database, associating them with their MIT Horizon identity.
•	Our existing local login and the login through our own Auth0 tenant (e.g., for Google social login, currently the “sign in with institutional account” button) must remain fully functional and separate.
Implementation Steps:
1.	Install Generic OIDC Passport Strategy:
o	npm install passport-openidconnect
2.	Environment Variables (in .env.example and your Replit Secrets):
o	Create placeholders and ensure you set the actual values (once received from MIT Horizon admin) in Replit Secrets for:
	MIT_HORIZON_OIDC_ISSUER_URL (Their Auth0 tenant domain, e.g., https://mit-horizon.auth0.com/)
	MIT_HORIZON_OIDC_CLIENT_ID
	MIT_HORIZON_OIDC_CLIENT_SECRET
	MIT_HORIZON_OIDC_CALLBACK_URL (e.g., https://aigrader.replit.app/api/auth/horizon/callback)
o	Add startup validation for these new environment variables in server/auth.ts (similar to existing checks).
3.	Database Schema (shared/schema.ts):
o	In the users table:
	Ensure password is nullable.
	Add a new column: mitHorizonSub: text("mit_horizon_sub").unique().nullable() (to store the unique subject ID from MIT Horizon's Auth0). Index this column.
	(The existing auth0Sub column will continue to be used for users authenticating via your own Auth0 tenant, e.g., through Google social login. The new mitHorizonSub is specifically for this direct OIDC connection).
4.	Storage Layer (server/storage.ts):
o	Implement new methods:
	getUserByMitHorizonSub(mitHorizonSub: string): Promise<User | undefined>
	updateUserMitHorizonSub(userId: number, mitHorizonSub: string): Promise<User | undefined>
o	(Existing updateUserEmailVerifiedStatus and updateUserRole methods will still be useful).
5.	Configure New passport-openidconnect Strategy (server/auth.ts):
o	Import Strategy as OIDCStrategy from passport-openidconnect.
o	**Conditionally initialize this new strategy, giving it a unique name like 'horizon-oidc'**. This strategy will run *in addition* to your existingLocalStrategyand potentially your existingAuth0Strategy` (if the latter is used for Google login via your Auth0 tenant).
TypeScript
// Inside configureAuth(app: any) in server/auth.ts
if (process.env.MIT_HORIZON_OIDC_ISSUER_URL /* && other related env vars */) {
  console.log('[INFO] Configuring direct MIT Horizon OIDC strategy');
  passport.use('horizon-oidc', new OIDCStrategy({
    issuer: process.env.MIT_HORIZON_OIDC_ISSUER_URL!,
    authorizationURL: `${process.env.MIT_HORIZON_OIDC_ISSUER_URL}authorize`,
    tokenURL: `${process.env.MIT_HORIZON_OIDC_ISSUER_URL}oauth/token`,
    userInfoURL: `${process.env.MIT_HORIZON_OIDC_ISSUER_URL}userinfo`,
    clientID: process.env.MIT_HORIZON_OIDC_CLIENT_ID!,
    clientSecret: process.env.MIT_HORIZON_OIDC_CLIENT_SECRET!,
    callbackURL: process.env.MIT_HORIZON_OIDC_CALLBACK_URL!,
    scope: 'openid email profile', // Request standard scopes
    passReqToCallback: false,
    skipUserProfile: false
  },
  async (issuer, uiProfile, idProfile, context, idToken, accessToken, refreshToken, params, done) => {
    // Log idProfile and uiProfile during development to understand their structure.
    // The 'sub' claim in idProfile is typically the unique ID from MIT Horizon's Auth0.
    // Implement user lookup/provisioning logic:
    // 1. Extract mitHorizonUserId (from idProfile.sub), email, name, emailVerified.
    // 2. Try storage.getUserByMitHorizonSub(mitHorizonUserId).
    // 3. If not found, try storage.getUserByEmail(email) to link. If found, call storage.updateUserMitHorizonSub().
    // 4. If still no user, create new AIGrader user:
    //    - password: null
    //    - mitHorizonSub: mitHorizonUserId
    //    - role: 'student' (or based on custom claims from idProfile if MIT Horizon sends them)
    //    - other details (email, name, emailVerified)
    // 5. Handle errors and call done(null, aigraderUserObject) or done(err).
    // 6. Include audit logging for successful auth and user creation.
  }));
}
o	IMPORTANT: Ensure passport.serializeUser and passport.deserializeUser are robust enough to handle users who might have an auth0Sub (from your Auth0) OR a mitHorizonSub, but always serialize/deserialize based on AIGrader's internal user.id.
6.	New Authentication Routes for Horizon OIDC (server/auth.ts or relevant route file):
o	Login Initiation: app.get('/api/auth/horizon/login', passport.authenticate('horizon-oidc', { scope: 'openid email profile' }));
o	Callback: app.get('/api/auth/horizon/callback', passport.authenticate('horizon-oidc', { failureRedirect: '/login?error=horizon_failed', successRedirect: '/dashboard' }), (req, res) => { /* Custom handler if needed after session is established by passport.authenticate's success */ res.redirect('/dashboard'); });
	Ensure this callback path (/api/auth/horizon/callback) is added to skipCsrfForRoutes in your CSRF middleware.
7.	Logout Handling (/api/auth/logout):
o	Modify the logout logic to handle multiple IdPs.
o	After req.logout():
	Check how the user was authenticated (e.g., does req.user have an auth0Sub from your tenant, or a mitHorizonSub?).
	If authenticated via MIT Horizon OIDC, redirect to MIT Horizon's Auth0 logout URL: https://<span class="math-inline">\{process\.env\.MIT\_HORIZON\_OIDC\_ISSUER\_URL\}v2/logout?client\_id\=</span>{process.env.MIT_HORIZON_OIDC_CLIENT_ID}&returnTo=${encodeURIComponent(YOUR_AIGRADER_LOGIN_PAGE_URL)}
	If authenticated via your own Auth0 (e.g., Google social login), redirect to your Auth0 tenant's logout URL.
	If local, just a local logout is fine.
o	This might require storing a hint in the user's AIGrader session about which IdP they used.
8.	Client-Side UI (client/src/pages/Login.tsx or similar):
o	Add a new, separate button: "Login with MIT Horizon". This button will link to /api/auth/horizon/login.
o	Keep your existing "Login with Google" (or general Auth0 login button that goes through your Auth0 tenant) and the local username/password form.
This approach allows you to add the direct MIT Horizon OIDC integration as another distinct authentication pathway, preserving your existing, working Auth0 integration (for Google login, etc.) and your local test account access. The main complexity added is managing multiple IdP configurations within server/auth.ts and a more nuanced logout process.

