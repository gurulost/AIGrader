"Hello AI Coder,

We're embarking on a focused effort to significantly upgrade the visual appeal, user interface polish, and overall user experience of the AIGrader application. Please implement the following changes, prioritizing them as listed. Our overarching vision is an application that feels professional, intuitive, modern, and trustworthy, reflecting the quality of an MIT-affiliated tool while being exceptionally user-friendly.

Core Visual Foundation (Highest Priority - These create the biggest immediate impact on professionalism and brand alignment):

Task 1: Precise MIT-Aligned Typography & Extended Type Scale

Vision & Why: To establish impeccable readability, a clear visual hierarchy, and strong brand alignment with MIT's typographic standards. This forms the absolute backbone of a professional and "editorial" feel, making content easy to consume and the application feel authoritative and polished.
Instructions:
Font Integration:
Confirm if we can use Neue Haas Grotesk (NHG) via Adobe Fonts as per the MIT Design Brief. If licensed and feasible, integrate NHG Display (for text >20px) and NHG Text (for text <=20px) as the primary sans-serif font in AIGrader/tailwind.config.ts and AIGrader/client/src/index.css.
If NHG is not feasible, ensure 'Inter' is consistently and correctly configured as the primary sans-serif workhorse.
Ensure 'Roboto Serif' remains the secondary serif font, loaded efficiently for sparing use.
Simplify font loading in AIGrader/client/index.html and AIGrader/client/src/index.css to only load necessary fonts and weights to improve performance. Remove the generic 'Roboto' sans-serif if 'Inter' is the primary.
Precise MIT Type Scale Implementation:
In AIGrader/tailwind.config.ts, create custom text utility classes (e.g., text-mit-h1, text-mit-body) that exactly match the font sizes AND line heights specified in the MIT Design Brief's type scale reference (H1: 48px/44px; H2: 32px/30px; H3: 24px/24px; Body: 16px/20px; Small: 14px/18px).
Update AIGrader/client/src/index.css to apply these new, precise custom utilities to the base HTML elements (h1, h2, h3, p, small).
Expanded Type Ramp:
Extend the type scale in AIGrader/tailwind.config.ts with utilities for 12px, 20px, 40px, 56px, and 72px font sizes. Define appropriate line heights (e.g., ≈1.2-1.3× for larger display text, ≈1.4–1.5× for smaller/utility text, or consistent with MIT's tighter headline style where appropriate).
Hierarchy Enforcement:
Globally review text usage. Ensure visual hierarchy is consistently established using the defined type scale and appropriate font weights (e.g., Regular, Medium, Semibold, Bold). Avoid using different text colors for emphasis unless it signifies an interactive element or a semantic state.
Task 2: Consistent Spacing System (8pt Grid)

Vision & Why: To create a visually harmonious, organized, and uncluttered interface. A consistent spacing system makes every element feel intentionally placed, contributing to a professional and high-quality user experience by reducing cognitive load and improving scannability. This directly supports the MIT brief's "modular" and "clean" design goals.
Instructions:
Verify and fully implement the spacing scale in AIGrader/tailwind.config.ts based on the 8px grid unit specified in the MIT Design Brief (e.g., utilities for 4px, 8px, 12px, 16px, 24px, 32px, 48px, 64px, etc.).
Systematically review all components and page layouts. Apply these defined spacing tokens consistently for all margins, paddings, and gaps between elements, and within UI cards/containers.
Ensure UI elements (like icons and text blocks) align to this grid where feasible.
Task 3: Consolidate and Apply Design Tokens (Colors, Radii, Shadows, Motion)

Vision & Why: To ensure strong brand consistency, a cohesive visual identity, and maintainability. Using a limited, well-defined set of design tokens (especially colors) makes the application look more "high-end," intentional, and directly aligns with the MIT brand, making future design updates easier.
Instructions:
Colors: Ensure all colors strictly adhere to the CSS variables in AIGrader/client/src/index.css (based on MIT Brand Guide colors like MIT Red, Silver Gray, etc.). Update Tailwind color utilities in AIGrader/tailwind.config.ts to directly reference these CSS variables.
Radii: Consistently apply var(--radius) (0.25rem/4px, matching MIT brief for buttons) to all relevant interactive elements (buttons, inputs, cards, modals).
Shadows: Consistently use pre-defined shadow-soft or shadow-card utilities from AIGrader/tailwind.config.ts for subtle, modern depth on cards and panels.
Motion: Consistently apply existing fade-in/slide-up animations from AIGrader/tailwind.config.ts (200-300ms) for elements appearing on screen, per the MIT brief.
UI Enhancements (Medium Priority - Build upon the solid foundation):

Task 4: Enhance Visual Hierarchy & Whitespace ("Breathing Room")

Vision & Why: To guide the user's attention effectively and make the interface feel calm and focused. Proper hierarchy ensures users can easily identify important actions and information. Ample whitespace enhances readability and contributes to a sophisticated, uncluttered aesthetic, aligning with the "editorial feel" from the MIT brief.
Instructions:
On key pages (dashboards, forms, feedback views), ensure the primary call-to-action (CTA) is visually dominant. Subdue secondary actions.
Systematically increase whitespace (margins, padding) around text blocks, between UI sections, and within components to improve clarity and visual comfort.
Task 5: Standardize Iconography

Vision & Why: To create a visually consistent, modern, and professional user interface. A single, high-quality icon set like Lucide improves clarity, recognizability, and overall aesthetic polish, moving away from a "prototype" feel.
Instructions:
Standardize on the lucide-react icon library (already a dependency).
Replace all instances of Material Icons (e.g., in AIGrader/client/index.html, AIGrader/client/src/lib/utils/file.ts) with appropriate Lucide icons.
Ensure consistent icon sizing (aligned to the 8pt grid where possible), stroke weight, and color usage (generally inheriting text color or using specific colors for semantic meaning).
Task 6: Consistent Border Radius and Interactive Element Styling Review

Vision & Why: To ensure all interactive elements look and feel like part of a cohesive design system. Perfecting the details of buttons and interactive controls according to the MIT brief will significantly elevate the perceived quality and professionalism.
Instructions:
Double-check that all interactive elements use the consistent border-radius (var(--radius)).
Review button styles (.btn-primary, .btn-secondary in AIGrader/client/src/index.css) to ensure they perfectly match the MIT Design Brief's specifications for padding, font size/weight, border, and especially hover/focus states (e.g., primary hover: fill MIT Red, text white). Ensure focus states are highly visible for accessibility.
Modern Polish (Lower Priority - Nice-to-haves once the above are solid):

Task 7: Enhanced Visual Feedback (Loading, Empty, Success States)

Vision & Why: To make the application feel more responsive, informative, and user-friendly by clearly communicating system status and guiding users, especially when data is absent or actions are being processed.
Instructions:
Loading States: Implement skeleton loaders for data-heavy components.
Empty States: Design clear and helpful empty states (icon, message, optional CTA).
Success/Error States: Ensure clear visual feedback for actions using toasts (from AIGrader/client/src/hooks/use-toast.ts) or inline messages, styled consistently.
Task 8: Subtle Microinteractions and Animations (Beyond Basic Fades/Slides)

Vision & Why: To add a layer of delight and responsiveness that makes the application feel more interactive and "alive," without being distracting. These subtle cues confirm user actions and make the interface feel more polished and modern.
Instructions:
Implement subtle hover effects on interactive elements like cards (e.g., slight lift/scale transform: scale(), soft shadow change).
Ensure button presses have clear visual feedback (e.g., slight transform: scale(0.98)).
If using framer-motion for more complex animations, ensure they are tasteful, performant (150-250ms easing curves), and serve a clear purpose in enhancing UX.
