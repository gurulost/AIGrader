1. Schema payload rejected
Gemini’s response_schema supports only a very small JSON-Schema subset:
type, properties, required, items, enum, format, and a few numeric/string range keywords.
Fields such as $schema, title, description, examples, and additionalProperties are not recognised and trigger the “Unknown name … Cannot find field” error you saw. 
Google AI Developers Forum

Your Zod→JSON-Schema converter is emitting the full Draft-07 spec, so Gemini chokes.

2. file_data.file_uri rejected
The protobuf behind the API expects snake-case keys:

{
  "file_data": {
    "file_uri": "files/abc123",
    "mime_type": "application/pdf"
  }
}
When you pass

fileData: { fileUri, mimeType }
the Node SDK doesn’t camel-case-convert nested objects, so the backend receives an object where it wants a string, hence “Starting an object on a scalar field”.
If you were also feeding it a raw GCS URL instead of a File-API URI, the backend would have refused anyway. 
Stack Overflow
Go Packages

Fixes in order of urgency
1 ️⃣ Strip unsupported keys from the schema before you send it

import _ from "lodash";

// keys Gemini will reject
const BLOCKLIST = new Set([
  "$schema", "title", "description", "examples", "default", "additionalProperties"
]);

function pruneForGemini(schema: any): any {
  if (Array.isArray(schema)) return schema.map(pruneForGemini);

  if (schema && typeof schema === "object") {
    return Object.fromEntries(
      Object.entries(schema)
        .filter(([k]) => !BLOCKLIST.has(k))
        .map(([k, v]) => [k, pruneForGemini(v)])
    );
  }
  return schema;
}

// in your adapter constructor
this.responseSchema = Object.freeze(pruneForGemini(gradingJSONSchema));
Confirmed by multiple dev-forum threads: removing additionalProperties and $schema resolves the 400. 
Google AI Developers Forum

2 ️⃣ Send snake-case file_data parts

Replace your apiParts.push({ fileData: … }) block with the SDK helper (preferred) or manual snake-case:

import { types } from '@google/genai';

// preferred – helper keeps field names correct
apiParts.push(
  types.Part.fromFile({
    fileUri,          // must be files/abc123
    mimeType
  })
);

// OR manual
apiParts.push({
  file_data: {        // snake_case
    file_uri: fileUri,
    mime_type: mimeType
  }
});
3 ️⃣ Always obtain a files/ URI via the Files API

Add (back) the createFileData() helper outlined earlier:

const upload = await this.genAI.files.upload({ buffer: data, mimeType });
return upload.uri;   // e.g. "files/abc123"
and call it for every document / audio / video and any image > 5 MB.
This URI is what you pass as file_uri. 
Google AI for Developers

