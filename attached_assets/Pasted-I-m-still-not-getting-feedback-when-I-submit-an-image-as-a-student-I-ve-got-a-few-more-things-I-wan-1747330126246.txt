I'm still not getting feedback when I submit an image as a student. I've got a few more things I want us to work on related to this: 
No File Retrieval for Cloud-Stored Submissions: The backend stores uploaded files in Google Cloud Storage (GCS) but never retrieves them for analysis. In code, storeSubmissionFile returns a GCS object path (e.g. "submissions/123/456/file.pdf") without a local copy
github.com
. If GCS is not configured, it just returns a mock path
github.com
. The AI processing worker then tries to fs.readFile using submission.fileUrl
github.com
, which fails because the file isn’t on the local disk. This likely causes the job to throw an error (File does not exist) before Gemini is even invoked. In effect, images/PDFs stored remotely are never actually read, leading to a failed submission and the “Feedback unavailable” message.

Gemini API Usage Edge Cases Causing Failures: The integration with the Gemini API, while thorough, has some edge-case shortcomings:
The code rightly uses the Gemini 2.5 model (gemini-2.5-flash-preview-0514) which supports text, images, and documents. It also follows Google’s best practices by using the File API for images and documents (as noted in comments)
github.com
github.com
. However, if those file API calls fail (due to API errors or size limits), the fallback handling can be inadequate. For example, if an image is slightly above the 4MB inline limit and the file upload fails, the code inserts a placeholder “[IMAGE: …could not be processed]” in the prompt
github.com
github.com
. Gemini might then return an empty or non-JSON response for such a prompt. The worker will catch a JSON parse failure or an API error and mark the submission as failed. In short, when Gemini’s file upload or analysis fails, the current fallback (placeholder text) isn’t always sufficient to generate feedback, resulting in a failure.

Another gap is how system instructions are supplied to Gemini. The implementation constructs a systemPrompt string with instructions and adds it as the first part of the user message
github.com
. This means all prompts are sent under the user role (the code calls generateContent with role: 'user' for all parts
github.com
). According to Gemini docs, using a true system role or the dedicated system instructions field yields better compliance
github.com
. The current approach might make the model more likely to include apologies or stray text instead of clean JSON. While the code does set responseFormat: { type: "STRUCTURED" }
github.com
, mixing system guidance into the user prompt could reduce clarity. This could contribute to Gemini sometimes failing to return the strictly formatted JSON, hence the error.

Implement Cloud File Download Before Analysis: Ensure that the AI service has access to the actual file bytes for every submission. If files are stored on S3/GCS, the worker should fetch the file (e.g. using a signed URL or the storage SDK) before calling processFileForMultimodal. In practice, that means:
Extend StorageService to provide a download method (using the generateSignedUrl and an HTTP fetch, or a direct GCS API call) to retrieve the file into memory.
In the queue worker, if submission.fileUrl is a cloud path (e.g. starts with submissions/), call this download function to get a Buffer. Then pass that Buffer and MIME type to processFileForMultimodal (instead of having it read from local disk). This will prevent “file not found” errors and allow analysis of files stored remotely.
As a temporary fix, since uploadBuffer returns the GCS object path, you could detect when isGcsConfigured() is false and simply use the already buffered file (from multer) for processing synchronously. However, the robust solution is to always retrieve from the source of truth (cloud storage) so that even asynchronous jobs can access the file.
